version: '3.8'

services:
  # Express приложение
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: tours-api
    depends_on:
      - postgres
    ports:
      - "${PORT}:${PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - MONGO_CONNECTION_STRING=${MONGO_CONNECTION_STRING}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AUTH_MODE=${AUTH_MODE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    restart: always
    networks:
      - tours-network
    # Используем dev-режим для автоматического перезапуска при изменениях в src
    command: npm run dev

  # PostgreSQL база данных
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: tours-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    networks:
      - tours-network

  # pgAdmin для управления базой данных
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tours-pgadmin
    depends_on:
      - postgres
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: always
    networks:
      - tours-network

# Определение volumes для хранения данных вне контейнеров
volumes:
  postgres-data:
  pgadmin-data:

# Определение пользовательской сети bridge для связи между контейнерами
networks:
  tours-network:
    driver: bridge
